# TODO: Refactor so token gets pulled only when it's absent
- name: Get an admin
  ansible.builtin.uri:
    url: "https://{{ portainer_ip }}:{{ 9443 }}/api/auth"
    method: POST
    return_content: true
    body_format: json
    status_code: 200
    validate_certs: false
    body:
      Username: "{{ portainer_username }}"
      Password: "{{ portainer_password }}"
  register: auth_token
  check_mode: false

- name: Add path to each volume's corresponding config file
  ansible.builtin.set_fact:
    volumes_and_paths: >
      {{ volumes_and_paths | default([]) +
      [{'volume': item, 'path': '/var/lib/docker/volumes/' + item + '/_data', 'files':
      (query('fileglob', 'templates/configs/' + item + '/*') | list)}] }}
  loop: "{{ all_volumes }}"
  when: query('fileglob', 'templates/configs/' + item + '/*') | length > 0

- name: Template all files in the Docker volume
  ansible.builtin.template:
    src: "{{ item.1 }}"
    dest: "{{ item.0.path }}/{{ item.1 | basename | regex_replace('.j2$', '')}}"
    owner: root
    group: root
    mode: '0644'
  loop: "{{ volumes_and_paths | subelements('files', 'skip_missing=True') }}"

- name: Fetch existing stacks
  ansible.builtin.uri:
    url: "https://{{ portainer_ip }}:{{ 9443 }}/api/stacks"
    method: GET
    return_content: true
    validate_certs: false
    headers:
      Authorization: "Bearer {{ (auth_token.content | from_json).jwt }}"
  register: existing_stacks_response
  check_mode: false

- name: Deploy all absent stacks (except Portainer)
  ansible.builtin.uri:
    url: "https://{{ portainer_ip }}:{{ 9443 }}/api/stacks?type=2&method=string&endpointId={{ portainer_endpoint_id }}"
    method: POST
    body_format: json
    validate_certs: false
    timeout: 500
    headers:
      Authorization: "Bearer {{ (auth_token.content | from_json).jwt }}"
    body:
      name: "{{ item }}"
      stackFileContent: "{{ lookup('template', 'roles/portainer_setup/templates/compose/{{ item }}.j2') }}"
    status_code: [200, 201]
  loop: "{{ stack_list_all | reject('equalto', 'portainer') | list }}"
  when: "item not in (existing_stacks_response.json | json_query('[*].Name'))"
