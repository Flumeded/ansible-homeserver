- name: Include stacks secrets variables
  ansible.builtin.include_vars:
    file: secret.compose_settings.yml

- name: Include stacks secrets variables
  ansible.builtin.include_vars:
    file: secret.portainer_installation.yml

# TODO: Refactor so token gets pulled only when it's absent
- name: Get a token if needed
  ansible.builtin.uri:
    url: "https://{{ portainer_ip }}:{{ portainer_port }}/api/auth"
    method: POST
    return_content: true
    body_format: json
    status_code: 200
    validate_certs: false
    body:
      Username: "{{ portainer_username }}"
      Password: "{{ portainer_password }}"
  register: auth_token

- name: Check if stack exists
  ansible.builtin.uri:
    url: "https://{{ portainer_ip }}:{{ portainer_port }}/api/stacks"
    method: GET
    validate_certs: false
    return_content: true
    headers:
      Authorization: Bearer {{ (auth_token.content | from_json).jwt }}
  register: content

- name: Disable systemd resolver (if necessary)
  ansible.builtin.include_tasks: disable_systemd_resolver.yml
  when: "'adguardhome' in portainer_stack_list"

# TODO: Seems without proper waiting it won't connect normally. Refactor to service wait?
- name: Wait for service to start
  ansible.builtin.wait_for:
    timeout: 10

# TODO: Add an endpoint ID fetch - check - store

- name: Deploy all absent stacks
  ansible.builtin.uri:
    url: "https://{{ portainer_ip }}:{{ portainer_port }}/api/stacks?type=2&method=string&endpointId={{ portainer_endpoint_id }}"
    method: POST
    body_format: json
    validate_certs: false
    timeout: '300'
    headers:
      Authorization: Bearer {{ (auth_token.content | from_json).jwt }}
    body:
      name: "{{ item }}"
      stackFileContent: "{{ lookup('template', 'roles/portainer_setup/templates/compose/{{ item }}.j2') }}"
  loop: "{{ portainer_stack_list }}"
  when: "item not in content.json | json_query('[*].Name')"
