---
- name: Include Proxmox Credentials for API usage
  ansible.builtin.include_vars: secret.proxmox_token.yml

- name: Get a ticket
  ansible.builtin.uri:
    url: "https://{{ proxmox_ip }}:8006/api2/json/access/ticket"
    method: POST
    return_content: true
    body_format: form-urlencoded
    status_code: 200
    validate_certs: false
    body:
      username: "{{ proxmox_username }}"
      password: "{{ proxmox_password }}"
  register: proxmox_ticket

- name: Check if HAOS VM exists
  ansible.builtin.uri:
    url: "https://{{ proxmox_ip }}:8006/api2/json/nodes/{{ proxmox_node }}/qemu/{{ haos_vm_id }}/status/current"
    method: GET
    status_code: 200, 500
    body_format: form-urlencoded
    validate_certs: false
    headers:
      Cookie: PVEAuthCookie={{ (proxmox_ticket.content | from_json).data.ticket }}
      CSRFPreventionToken: "{{ (proxmox_ticket.content | from_json).data.CSRFPreventionToken }}"
  register: haos_exists_result

- name: Check if HAOS image exists
  ansible.builtin.stat:
    path: "/tmp/{{ haos_release | regex_replace('\\.xz$', '') }}"
  register: haos_stat_result
  when: haos_exists_result.status != 200

# TODO: Maybe change this later to lookup for latest release?
- name: Get latest release of HAOS
  ansible.builtin.get_url:
    url: "https://github.com/home-assistant/operating-system/releases/latest/download/{{ haos_release }}.qcow2.xz"
    dest: "/tmp/{{ haos_release }}.qcow2.xz"
    mode: '0644'
  when: not haos_stat_result.stat.exists and haos_exists_result.status != 200

- name: Unarchive HAOS image
  ansible.builtin.command:
    cmd: "unxz --force /tmp/{{ haos_release }}.qcow2.xz"
  when: not haos_stat_result.stat.exists and haos_exists_result.status != 200
  register: command_result
  changed_when: command_result.rc != 0

- name: Create a HAOS VM
  ansible.builtin.uri:
    url: "https://{{ proxmox_ip }}:8006/api2/json/nodes/{{ proxmox_node }}/qemu"
    method: POST
    status_code: 200
    body_format: form-urlencoded
    validate_certs: false
    headers:
      Cookie: PVEAuthCookie={{ (proxmox_ticket.content | from_json).data.ticket }}
      CSRFPreventionToken: "{{ (proxmox_ticket.content | from_json).data.CSRFPreventionToken }}"
    body:
      node: '{{ proxmox_node }}'
      vmid: '{{ haos_vm_id }}'
      name: '{{ haos_vm_name }}'
      cpu: 'cputype=host'
      vcpus: '2'
      cores: '2'
      memory: '2048'
      bios: 'ovmf'
      scsihw: 'virtio-scsi-pci'
      agent: 1
      onboot: 1
      kvm: '{{ kvm_enabled }}'
      net0: 'virtio,bridge=vmbr0'
      scsi0: 'local-lvm:0,import-from=/tmp/{{ haos_release }}.qcow2'
      ipconfig0: 'ip=dhcp'
      usb0: 'host=10c4:ea60'
      usb1: 'host=2357:0604'
  when: haos_exists_result.status != 200

- name: Wait untill HAOS VM deployment is complete
  ansible.builtin.uri:
    url: "https://{{ proxmox_ip }}:8006/api2/json/nodes/{{ proxmox_node }}/qemu/{{ haos_vm_id }}/status/current"
    method: GET
    status_code: 200
    body_format: form-urlencoded
    validate_certs: false
    headers:
      Cookie: PVEAuthCookie={{ (proxmox_ticket.content | from_json).data.ticket }}
  register: cloud_init_lock
  until: cloud_init_lock.json.data.lock is not defined
  retries: 15
  delay: 30
  when: haos_exists_result.status != 200

- name: Start a HAOS VM
  ansible.builtin.uri:
    url: "https://{{ proxmox_ip }}:8006/api2/json/nodes/{{ proxmox_node }}/qemu/{{ haos_vm_id }}/status/start"
    method: POST
    status_code: 200, 500
    body_format: form-urlencoded
    validate_certs: false
    headers:
      Cookie: PVEAuthCookie={{ (proxmox_ticket.content | from_json).data.ticket }}
      CSRFPreventionToken: "{{ (proxmox_ticket.content | from_json).data.CSRFPreventionToken }}"
